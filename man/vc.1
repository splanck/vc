.TH VC 1 "2025-06-24" "vc 0.1.0" "User Commands"
.SH NAME
vc \- lightweight ANSI C compiler
.SH SYNOPSIS
.B vc
.RI [ options ] " source.c..."
.SH DESCRIPTION
.B vc
is a lightweight ANSI C compiler with experimental C99 support.
It processes input through lexical analysis, parsing, semantic analysis,
optional optimizations, register allocation and code generation.
The resulting assembly can be written to a file or printed to stdout.
Intel-style assembly output may be selected with \fB--intel-syntax\fR.
Supported constructs include arrays (including variable length arrays inside functions with sizes determined at runtime, size inference from initializer lists and designated initializers using \fB[index]\fR or \fB.member\fR designators), pointer arithmetic (including pointer subtraction and pointer increments), loops (\fBfor\fR, \fBwhile\fR and \fBdo\fR\~\fBwhile\fR), global variable declarations, external declarations using \fBextern\fR, floating-point variables including \fBlong double\fR, the
\fBchar\fR type, support for 64-bit integer constants including hexadecimal and octal literals, string literals usable as \fBchar\fR pointers with standard escape sequences such as \n, \t, \r, \b, \f, \v and numeric forms like \e123 or \ex7F, complete \fBstruct\fR and \fBunion\fR declarations with bit-field members, enum variables, typedef declarations, the
Wide character and string literals may be written using L'c' and L"text".
\fBconst\fR (which requires an initializer), \fBvolatile\fR and \fBrestrict\fR and \fBregister\fR qualifiers, and the \fBbreak\fR and \fBcontinue\fR statements, \fBswitch\fR with \fBcase\fR and \fBdefault\fR labels, variadic functions using \fB...\fR (including \fBfloat\fR, \fBdouble\fR and \fBlong double\fR arguments), as well as labels and \fBgoto\fR.
Function definitions may also use the \fBinline\fR keyword.
.PP
Variable length arrays are supported only for block scope variables.
They may be sized using any runtime expression and are fully compatible
with \fBsizeof\fR, but cannot appear at file scope or as struct members.
.PP
The built-in preprocessor expands \fB#include\fR directives, object-like
and parameterized macros defined with \fB#define\fR. Macro bodies may be
expanded recursively. The \fB#\fR operator stringizes a parameter and
\fB##\fR concatenates two tokens. Macros may be removed with \fB#undef\fR.
The \fB#error\fR directive prints its message to stderr and aborts
preprocessing when encountered.
Several standard identifiers are always defined and expand to context
information: \fB__FILE__\fR yields the current file name, \fB__LINE__\fR
the current line number and \fB__DATE__\fR/\fB__TIME__\fR the build date
and time. Additional built-ins include \fB__STDC__\fR (1),
\fB__STDC_VERSION__\fR (199901L) and \fB__func__\fR which expands to
the enclosing function name.
Conditional
directives (\fB#if\fR, \fB#ifdef\fR, \fB#ifndef\fR, \fB#elif\fR, \fB#else\fR
and \fB#endif\fR) are supported using expression evaluation with the
\fBdefined\fR operator.
.SH OPTIONS
.TP
.BR -o "," \fB--output\fR \fIfile\fR
Write assembly output to \fIfile\fR.
.TP
.BR -h "," \fB--help\fR
Display usage information and exit.
.TP
.BR -v "," \fB--version\fR
Print version information and exit.
.TP
.B \-O\fIN\fR
Set optimization level (0 disables all optimizations). The optimizer also
performs common subexpression elimination.
.TP
.BR -I "," \fB--include\fR \fIdir\fR
Add directory to the include search path. Angle-bracket includes search these
directories, then any paths from the \fBVCPATH\fR environment variable,
followed by the standard locations such as \fI/usr/include\fR. Quoted
includes also consult directories from \fBVCINC\fR.
.TP
.B --no-fold
Disable constant folding optimization.
.TP
.B --no-dce
Disable dead code elimination.
.TP
.B --no-cprop
Disable constant propagation.
.TP
.B --no-inline
Disable inline expansion of small functions.
.TP
.B --debug
Emit .file and .loc directives for debugging.
.TP
.B --x86-64
Generate x86-64 assembly instead of 32-bit.
.TP
.B --intel-syntax
Use Intel-style x86 assembly output.
.TP
.BR -c "," \fB--compile\fR
Assemble the output into an object file using \fBcc -c\fR.
.TP
.B --link
Assemble and link the output to create an executable with \fBcc\fR.
.TP
.BR --obj-dir " " \fIdir\fR
Place temporary object files in \fIdir\fR instead of \fB/tmp\fR.
.TP
.BR -S "," \fB--dump-asm\fR
Print generated assembly to stdout rather than creating a file.
.TP
.B --dump-ir
Print IR to stdout before generating assembly.
.TP
.BR --std=\fIstd\fR
Select the language standard. Valid values are \fIc99\fR (default) or \fIgnu99\fR.
.TP
.BR -E "," \fB--preprocess\fR
Run only the preprocessor and write the expanded source to stdout.
.SH EXAMPLES
Compile a source file to \fIout.s\fR:
.PP
.B vc -o out.s source.c
.PP
Create an object file:
.PP
.B vc -c -o out.o source.c
.PP
Build an executable:
.PP
.B vc --link -o prog main.c util.c
.PP
Print the generated assembly:
.PP
.B vc -S source.c
.PP
Read source from standard input:
.PP
.B cat prog.c \| vc -o out.s -
.PP
Compile a program using pointer increments:
.PP
.B vc -o ptr_inc.s ptr_inc.c
.PP
Call a function via a pointer variable:
.PP
.B vc -o func_ptr.s func_ptr.c
.SH ENVIRONMENT
.TP
.B VCPATH
Colon separated list of additional directories searched for headers after any
.B -I
paths are processed.
.TP
.B VCINC
Colon separated list of directories added to the include search path after any
.B -I
paths are processed.
.SH SEE ALSO
README.md, docs/language_features.md (see the "Union declarations" section).
