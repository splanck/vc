.TH VC 1 "2025-06-24" "vc 0.1.0" "User Commands"
.SH NAME
vc \- lightweight ANSI C compiler
.SH SYNOPSIS
.B vc
.RI [ options ] " source.c..."
.SH DESCRIPTION
.B vc
is a lightweight ANSI C compiler with experimental C99 support.
It processes input through lexical analysis, parsing, semantic analysis,
optional optimizations, register allocation and code generation.
The resulting assembly can be written to a file or printed to stdout.
Intel-style assembly output may be selected with \fB--intel-syntax\fR.
When this mode is combined with \fB--compile\fR or \fB--link\fR an
assembler capable of NASM syntax (see \fBAS\fR) must be available.
Functions may return \fBstruct\fR or \fBunion\fR values via a hidden pointer.
Supported constructs include:
.IP \[bu] 2
Arrays with variable length support (block scope only), size inference from initializer lists and designated initializers using \fB[index]\fR or \fB.member\fR designators.
.IP \[bu] 2
Pointer arithmetic, including subtraction and increment operations.
.IP \[bu] 2
C-style casts using the (type)expr syntax for explicit conversions.
.IP \[bu] 2
Control flow with \fBfor\fR, \fBwhile\fR and \fBdo\fR\~\fBwhile\fR loops.
.IP \[bu] 2
Global and external variable declarations.
.IP \[bu] 2
Global pointers may be initialized with the address of another symbol.
.IP \[bu] 2
Floating\-point types (including \fBlong double\fR) and the boolean type via \fB_Bool\fR.
.IP \[bu] 2
Complex number types using \fB_Complex\fR with support for +, \-, \*, and / operators.
.IP \[bu] 2
64\-bit integer constants (hexadecimal and octal) and character or string literals with standard escape sequences.
.IP \[bu] 2
Integer literals may use the suffixes \fBu\fR/\fBU\fR and \fBl\fR/\fBLL\fR in any order.
.IP \[bu] 2
Complete \fBstruct\fR and \fBunion\fR declarations with bit fields, enumeration types and typedefs.
.IP \[bu] 2
Custom alignment via \fB_Alignof\fR and \fBalignas\fR.
.IP \[bu] 2
Union access tracking which reports an error if a different member is read after writing another.
.IP \[bu] 2
Compile-time assertions via \fB_Static_assert\fR.
.IP \[bu] 2
Functions marked with \fB_Noreturn\fR or the GNU \fB__attribute__((noreturn))\fR
are treated as terminating calls.
.IP \[bu] 2
Wide character and string literals using L'c' and L"text".
.IP \[bu] 2
Adjacent string literals are concatenated at compile time.
.IP \[bu] 2
Qualifiers such as \fBconst\fR (requires an initializer), \fBvolatile\fR, \fBrestrict\fR and \fBregister\fR.
.IP \[bu] 2
Statements like \fBbreak\fR, \fBcontinue\fR, \fBswitch\fR with \fBcase\fR/\fBdefault\fR labels, variadic functions using \fB...\fR (floating\-point arguments are handled correctly), labels and \fBgoto\fR.
.IP \[bu] 2
Inline function definitions.
.PP
Variable length arrays are supported only for block scope variables.
They may be sized using any runtime expression and are fully compatible
with \fBsizeof\fR, but cannot appear at file scope.  Structures may end
with a flexible array member declared using an empty bracket pair.  Such
members occupy no space in \fBsizeof\fR results and must appear last.
.PP
The built-in preprocessor expands \fB#include\fR and \fB#include_next\fR
directives, object-like
and parameterized macros defined with \fB#define\fR. Lines ending with
\fB\\\fR are joined so a macro body may span multiple lines. Macro bodies may be
expanded recursively. The \fB#\fR operator stringizes a parameter and
\fB##\fR concatenates two tokens. Macros may be removed with \fB#undef\fR.
Variadic macros are declared by ending the parameter list with \fB...\fR and
use \fB__VA_ARGS__\fR within the body to access the extra arguments.
The \fB#error\fR directive prints its message to stderr and aborts
preprocessing when encountered.  The \fB#warning\fR directive prints its
message but preprocessing continues.  The special pragma
\fB#pragma pack(push,n)\fR changes struct packing alignment with
\fB#pragma pack(pop)\fR restoring the previous value.
\fB#pragma once\fR marks a header so subsequent includes of the same
file are ignored.
Several standard identifiers are always defined and expand to context
information: \fB__FILE__\fR yields the current file name, \fB__LINE__\fR
the current line number and \fB__DATE__\fR/\fB__TIME__\fR the current date
and time. Additional built-ins include \fB__STDC__\fR (1),
\fB__STDC_VERSION__\fR (199901L) and \fB__func__\fR which expands to
the enclosing function name.
Conditional
directives (\fB#if\fR, \fB#ifdef\fR, \fB#ifndef\fR, \fB#elif\fR, \fB#else\fR
and \fB#endif\fR) are supported using expression evaluation with the
\fBdefined\fR operator.
.SH OPTIONS
.TP
.BR -o "," \fB--output\fR \fIfile\fR
Write assembly output to \fIfile\fR.
.TP
.BR -h "," \fB--help\fR
Display usage information and exit.
.TP
.BR -v "," \fB--version\fR
Print version information and exit.
.TP
.B \-O\fIN\fR
Set optimization level (0 disables all optimizations). The optimizer also
performs common subexpression elimination.
.TP
.BR -I "," \fB--include\fR \fIdir\fR
Add directory to the include search path. Angle-bracket includes search these
directories, then any paths from the \fBVCPATH\fR environment variable,
followed by the standard locations such as \fI/usr/include\fR. Quoted
includes also consult directories from \fBVCINC\fR.
.TP
.B \-L\fIdir\fR
Add directory to the library search path when linking.
.TP
.B \-l\fIname\fR
Link against the specified library.
.TP
.B \-D\fIname[=val]\fR
Define a preprocessor macro before compilation. When no value is given,
the macro is set to \fB1\fR.
.TP
.B \-U\fIname\fR
Remove any definition of \fIname\fR before preprocessing begins.
.TP
.B \-fmax-include-depth=\fIn\fR
Set the maximum nested \fB#include\fR depth (default 20).
.TP
.B --no-fold
Disable constant folding optimization.
.TP
.B --no-dce
Disable dead code elimination.
.TP
.B --no-cprop
Disable constant propagation.
.TP
.B --no-inline
Disable inline expansion of small functions.
.TP
.B --debug
Emit .file and .loc directives for debugging.
.TP
.B --emit-dwarf
Include DWARF line and symbol information in object files.
.TP
.B --no-color
Disable ANSI colors in diagnostic output.
.TP
.B --no-warn-unreachable
Suppress warnings for unreachable statements after a
.B return
or a goto to the function end label.
.TP
.B --x86-64
Generate x86-64 assembly instead of 32-bit.
.TP
.B --intel-syntax
Use Intel-style x86 assembly output. When combined with
\fB--compile\fR or \fB--link\fR this option requires an assembler that
understands NASM syntax (see \fBAS\fR).
.TP
.BR -c "," \fB--compile\fR
Assemble the output into an object file using \fBcc -c\fR. When multiple
input files are provided an object is created for each source in the
current directory.
.TP
.B --link
Assemble and link the output to create an executable with \fBcc\fR.
.TP
.BR --obj-dir " " \fIdir\fR
Place temporary object files in \fIdir\fR.  When this option is
omitted the compiler first checks \fBTMPDIR\fR and \fBP_tmpdir\fR for
a directory.  Only if neither variable is set does it default to
\fB/tmp\fR.
.TP
.BR -S "," \fB--dump-asm\fR
Print generated assembly to stdout rather than creating a file.
.TP
.B --dump-ast
Print the AST to stdout after parsing.
.TP
.B --dump-ir
Print IR to stdout before generating assembly.
.TP
.B --dump-tokens
Print the token list to stdout after preprocessing.
.TP
.B -M
Generate a .d file listing the source and all headers and exit.
.TP
.B -MD
Generate a .d file while compiling normally.
.TP
.BR --std=\fIstd\fR
Select the language standard. Valid values are \fIc99\fR (default) or \fIgnu99\fR.
.TP
.BR -E "," \fB--preprocess\fR
Run only the preprocessor and write the expanded source to stdout.
.SH EXAMPLES
Compile a source file to \fIout.s\fR:
.PP
.B vc -o out.s source.c
.PP
Create an object file:
.PP
.B vc -c -o out.o source.c
.PP
Compile multiple sources to objects:
.PP
.B vc -c foo.c bar.c
.PP
Build an executable:
.PP
.B vc --link -o prog main.c util.c
.PP
Print the generated assembly:
.PP
.B vc -S source.c
.PP
Read source from standard input:
.PP
.B cat prog.c \| vc -o out.s -
.PP
.SH ENVIRONMENT
.TP
.B VCPATH
Colon separated list (or semicolon separated on Windows) of additional directories searched for headers after any
.B -I
paths are processed.
.TP
.B VCINC
Colon separated list (or semicolon separated on Windows) of directories added to the include search path after any
.B -I
paths are processed.
.TP
.B VCFLAGS
Space separated list of additional command line options prepended before
parsing. Flags given directly on the command line override these.
.TP
.B AS
Assembler program to invoke instead of the default.
.TP
.B CC
Command used for linking and as the default assembler when using AT&T syntax.
.TP
.B TMPDIR
Directory for temporary object files when \fB--obj-dir\fR is not used.
.TP
.B P_tmpdir
Alternative directory for temporary files if \fBTMPDIR\fR is unset.
.SH SEE ALSO
README.md, docs/command_line.md, docs/language_features.md (see the "offsetof" section).
