.TH VC 1 "2025-06-24" "vc 0.1.0" "User Commands"
.SH NAME
vc \- lightweight ANSI C compiler
.SH SYNOPSIS
.B vc
.RI [ options ] " source.c"
.SH DESCRIPTION
.B vc
is a lightweight ANSI C compiler with experimental C99 support.
It processes input through lexical analysis, parsing, semantic analysis,
optional optimizations, register allocation and code generation.
The resulting assembly can be written to a file or printed to stdout.
Supported constructs include arrays, pointer arithmetic (including pointer subtraction and pointer increments), loops (\fBfor\fR, \fBwhile\fR and \fBdo\fR\~\fBwhile\fR), global variable declarations, floating-point variables, the
\fBchar\fR type, 64-bit integer literals and arithmetic, basic \fBunion\fR declarations, and the
\fBbreak\fR and \fBcontinue\fR statements.
.PP
The built-in preprocessor expands \fB#include\fR directives, object-like
and single-argument macros defined with \fB#define\fR. Conditional
directives (\fB#if\fR, \fB#ifdef\fR, \fB#ifndef\fR, \fB#elif\fR, \fB#else\fR
and \fB#endif\fR) are supported using expression evaluation with the
\fBdefined\fR operator.
.SH OPTIONS
.TP
.BR -o "," \fB--output\fR \fIfile\fR
Write assembly output to \fIfile\fR.
.TP
.BR -h "," \fB--help\fR
Display usage information and exit.
.TP
.BR -v "," \fB--version\fR
Print version information and exit.
.TP
.B \-O\fIN\fR
Set optimization level (0 disables all optimizations).
.TP
.BR -I "," \fB--include\fR \fIdir\fR
Add directory to the include search path.
.TP
.B --no-fold
Disable constant folding optimization.
.TP
.B --no-dce
Disable dead code elimination.
.TP
.B --no-cprop
Disable constant propagation.
.TP
.B --x86-64
Generate x86-64 assembly instead of 32-bit.
.TP
.BR -c "," \fB--compile\fR
Assemble the output into an object file using \fBcc -c\fR.
.TP
.B --dump-asm
Print generated assembly to stdout rather than creating a file.
.TP
.B --dump-ir
Print IR to stdout before generating assembly.
.SH EXAMPLES
Compile a source file to \fIout.s\fR:
.PP
.B vc -o out.s source.c
.PP
Create an object file:
.PP
.B vc -c -o out.o source.c
.PP
Print the generated assembly:
.PP
.B vc --dump-asm source.c
.PP
Compile a program using pointer increments:
.PP
.B vc -o ptr_inc.s ptr_inc.c
.SH SEE ALSO
README.md, docs/vcdoc.md (see the "Union declarations" section)
